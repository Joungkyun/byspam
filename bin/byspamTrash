#!@PERLPATH@
#
# By SPAM trash viewer front end
# $Id$
#
use lib '@includedir@';
use strict;

use Byspam::Init;
use Byspam::Getopt;
use Byspam::Common;
use Byspam::Trash;
use Byspam::Encode;

# declaration global variable on configuration file
use vars qw ( $charset $charset_mail $version $debug $verbose $inbox);

# reference variable
my $cm;
my $o;
my $ov;
my $ts;
my $shm;

# init configuration and filter variables
$shm = Byspam::Init->new ();

#$version = $shm->opts ('version');
$version = '1.0.4';
$inbox   = $shm->opts('inbox');

# options variable
use vars qw ( $_hdebug $_bdebug $_path $_user $_root $_direct );
my $opt;
my %_opt;
my $_file  = "";
my $_upath = "";
my $_arg   = "";

$_path     = "";
$_user     = "";
$_root     = 1;
$_direct   = 0;

# body & header parsing debug mode
$_hdebug   = 0;
$_bdebug   = 0;

# get argument on shell
my $_argc  = $#ARGV;
my @_argv  = @ARGV;


# usage option
use vars qw ( @spamlist $spamno $_page $_tpage $_start $_startl );
use vars qw ( $_limit $_until $_untill $_nullchk $_read );
use vars qw ( $_from $_sublen );

@spamlist = ();
$spamno   = 0;
$_page    = 1;
$_tpage   = 0;
$_start   = 0;
$_limit   = 10;
$_until   = 1;
$_startl  = 0;
$_untill  = 0;
$_nullchk = 0;
$_read    = "";
$_from    = 0;
$_sublen  = 60;

# create reference Common
$cm = new Byspam::Common;

$charset = $ENV{"LANG"};
CHARSET: {
	( $charset =~ m/utf[-]?8/i ) and $charset = "UTF-8", last CHARSET;
	( $charset =~ m/^ko/i ) and $charset = "EUC-KR", last CHARSET;
	$charset = "";
}

# default charset when charset is not exists.
$charset_mail = $shm->opts ('charset_mail');
$charset_mail = 'EUC-KR' if ( ! $charset_mail );

# create reference Getopt
$o = new Byspam::Getopt;
$ov = $o->{_var};

# create reference Trash
$ts = new Byspam::Trash;

# match long option whit short option
$ov->{longopt} = {
	'isfrom'      => 'f',
	'sublen'      => 's',
	'pageview'    => 'p',
	'help'        => 'h'
};

while ( 1 ) {
	$opt = $o->getopt ("fs:p:h", $_argc + 1, @_argv);
	last if ( ! $opt );

	SWITCH: {
		( $opt eq "f" ) and do {
			$_from = 1;
			last SWITCH;
		};
		( $opt eq "s" ) and do {
			Help () if ( ! $ov->{optarg} );
			$_sublen = $ov->{optarg};
			last SWITCH;
		};
		( $opt eq "p" ) and do {
			Help () if ( ! $ov->{optarg} );
			$_limit = $ov->{optarg};
			last SWITCH;
		};
		Help ();
	}
}

Help () if ( $ov->{getopt_err} );
$_arg = $ov->{optcmd}->[0];

if ( -f "$_arg" && ! -d "$_arg" ) {
	$_file = $_arg;
	$_path = "";

	$_root = 0 if ( $ENV{"USER"} ne "root" );
	$_direct = 1;
} else {
	$_user = $ENV{"USER"};

	if ( $_user eq "root" ) {
		$_user = ( ! $_arg ) ? "root" : $_arg;
	} else {
		$_root = 0;
	}

	$_upath = $ts->getHomePath ($_user);
	$_path = "$_upath/byspam";
}

PAGERESET:

@spamlist = $ts->getTrashList ($_path);
$spamno   = @spamlist;
$_tpage = $ts->totalPage ($spamno, $_limit);

$_until = 0;
while ( 1 ) {
	system ("clear");
	print "=============================================================================\n";
	print "[1;37mby SPAM Trash Viewer[7;0m $version by JoungKyun Kim <http://oops.org>\n";
	print "Command [ q - quit | no - view no | d no - del no | enter - next | b - back ]\n";
	print "=============================================================================\n";
	print "Total $_tpage page / Current $_page page\n";
	print "Total $spamno files\n\n";

	$_startl = $_start;
	$_untill = $_until;
	$_until  = $_untill + $_limit;
	if ( $_until > $spamno ) {
		$_until  = $_limit * $_tpage;
		$_untill = $_until - $_limit;
	}

	if ( ! $spamno && ! -f $_file ) {
		$cm->printError ("ERROR: No exists trash file\n");
		exit 0;
	} else {
		# direct view specify file
		if ( ! $_path && -f $_file && ! -d $_file ) {
			$ts->printTrash ($_path, $_file, $_user, $_sublen, $_from);
			print "\n";
			exit 0;
		}

		while ( 1 ) {
			my $_filename = $spamlist[$_start];

			if ( $_start < $_until && $_filename ) {
				printf "%4s. %s\n", $_start + 1, $_filename;
				$_start++;
			} else {
				if ( ! $_filename ) {
					$_start = $_startl;
					$_nullchk = 1;
				} else {
					$_nullchk = 0;
				}
				last;
			}
		}
	}

	print "\n" .
		  "-----------------------------------------------------------------------------\n" .
		  "[1;37mCommand:[7;0m ";

	exit 0 if ( $spamno == 0 );
	$_read = <STDIN>;

	$ts->nextFunc ();
}

sub Help {
	my @helps = ();
	my $USAGES;
	my $OPTN;
	my $ARGUMENT;

	if ( $ENV{'LANG'} =~ m/^ko/i ) {
		$USAGES = "사용법";
		$OPTN = "옵션";
		$ARGUMENT = "파일이름 | 계정";
		@helps = (
					"보낸이 주소를 출력",
					"페이지당 리스트 수 [기본 10개]",
					"출력할 메일 제목 길이 [기본 60자]",
					"현재 메세지를 출력"
		);
		if ( $ENV{'LANG'} =~ m/euc-kr/i ) {
			Encode::from_to ($USAGES, 'utf-8', 'euc-kr');
			Encode::from_to ($OPTN, 'utf-8', 'euc-kr');
			Encode::from_to ($ARGUMENT, 'utf-8', 'euc-kr');
			my $i = 0;
			my $size = @helps;
			for ( ; $i<$size; $i++ ) {
				Encode::from_to ($helps[$i], 'utf-8', 'euc-kr');
			}
		}
	} else {
		$USAGES = "USAGE";
		$OPTN = "OPTION";
		$ARGUMENT = "FileName | AccountName";
		@helps = (
					"print sender address",
					"number of list per page [default 10]",
					"length of subject [default 60]",
					"print this message"
		);
	}

    $cm->printError (
			"$USAGES : $0 -[$OPTN] <$ARGUMENT>\n" .
			"$OPTN :\n" .
			"          -f --isfrom   => $helps[0]\n" .
			"          -p --pageview => $helps[1]\n" .
			"          -s --sublen   => $helps[2]\n" .
			"          -h --help     => $helps[3]\n"
	);
    exit 1;
}

exit 0;

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: noet sw=4 ts=4 fdm=marker
# vim<600: noet sw=4 ts=4
#
